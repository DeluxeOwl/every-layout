:root{
    --space:1.5rem;
}
.stack {
    background-color: #e6e6e6;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    /* if only child, elements will overflow with a high --space */
    /* overflow: scroll; */
    /* or hidden */
}

/* if you want recursive nesting */
/* .stack * + * {
    margin-block-start: var(--space, 1.5rem);
} */

.stack > * + * {
    margin-block-start: var(--space, 1.5rem);
}

.stack > :nth-child(3) {
    margin-block-end: auto;
}

.stack:only-child {
    block-size: 100%;
}

.stack > p {
    border: 2px solid green;
}



.box {
    --s1:1rem;
    /* ↓ Padding set to the first point on the modular scale */
    padding: var(--s1);
    --border-thin: 2px;
    /* ↓ Assumes you have a --border-thin var */
    border: var(--border-thin) solid;
    /* ↓ Always apply the transparent outline, for high contrast mode */
    outline: var(--border-thin) transparent;
    outline-offset: calc(var(--border-thin) * -1);
    /* ↓ The light and dark color vars */
    --color-light: #fff;
    --color-dark: #000;
    color: var(--color-dark);
    background-color: var(--color-light);
}
.box * {
/* ↓ Force colors to inherit from the parent
and honor inversion (below) */
color: inherit;
}
.box.invert {
/* ↓ The color vars inverted */
color: var(--color-light);
background-color: var(--color-dark);
}