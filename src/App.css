:root{
    --space:1.5rem;
}

.wrapper {
    margin: 0 1rem 2rem 1rem;
}
.wrapper > div {
    background-color: #f5f5f5;
}

h1 {
    margin-block-start: 1rem;
    margin-block-end: 1rem;
}

.stack {
    
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    /* if only child, elements will overflow with a high --space */
    /* overflow: scroll; */
    /* or hidden */
}

/* if you want recursive nesting */
/* .stack * + * {
    margin-block-start: var(--space, 1.5rem);
} */

.stack > * + * {
    margin-block-start: var(--space, 1.5rem);
}

.stack > :nth-child(3) {
    margin-block-end: auto;
}

.stack:only-child {
    block-size: 100%;
}

.stack > p {
    border: 2px solid green;
}



.box {
    --s1:1rem;
    /* ↓ Padding set to the first point on the modular scale */
    padding: var(--s1);
    --border-thin: 2px;
    /* ↓ Assumes you have a --border-thin var */
    border: var(--border-thin) solid;
    /* ↓ Always apply the transparent outline, for high contrast mode */
    outline: var(--border-thin) transparent;
    outline-offset: calc(var(--border-thin) * -1);
    /* ↓ The light and dark color vars */
    --color-light: #fff;
    --color-dark: #000;
    color: var(--color-dark);
    background-color: var(--color-light);
}
.box * {
    /* ↓ Force colors to inherit from the parent
    and honor inversion (below) */
    color: inherit;
}
.box.invert {
    /* ↓ The color vars inverted */
    color: var(--color-light);
    background-color: var(--color-dark);
}

.center {
    --s1: 1rem;
	box-sizing: content-box;
	max-inline-size: 60ch;
	margin-inline: auto;
	padding-inline-start: var(--s1);
	padding-inline-end: var(--s1);
    /* text-align: center; */
}

.center-flexbox {
	box-sizing: content-box;
	max-inline-size: 60ch;
	margin-inline: auto;
	display: flex;
	flex-direction: column;
    /* You can play with align-items here */
	align-items: center;
}

/* .cluster { */
    /* ↓ Set the Flexbox context */
    /* display: flex; */
    /* ↓ Enable wrapping */
    /* flex-wrap: wrap; */
    /* ↓ Set the space/gap */
    /* gap: var(--space, 1rem); */
    /* ↓ Choose your justification (flex-start is default) */
    /* justify-content: center; */
    /* ↓ Choose your alignment (flex-start is default) */
    /* align-items: center; */
/* } */

.cluster {
    --space: 1rem;
    display: flex;
    flex-wrap: wrap;
    gap: var(--space, 1rem);

    /* justify-content: space-between;
    align-items: center; */
}
.cluster.space-between {
    justify-content: space-between;
    align-items: center;
}
.cluster.flex-start {
    justify-content: flex-start;
}